---
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
  schedule:
    - cron: "0 0 * * *"

env:
  DEFAULT_PYTHON: "3.13"

jobs:
  pre-commit:
    runs-on: "ubuntu-latest"
    name: Pre-commit
    steps:
      - name: Check out the repository
        uses: actions/checkout@v5.0.0
      - name: Set up Python 3.13
        uses: actions/setup-python@v6.0.0
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_test.txt
          pip install -e .
      - name: Run pre-commit on all files
        run: |
          pre-commit run --all-files --color=always

  test:
    runs-on: "ubuntu-latest"
    name: Test Python ${{ matrix.python-version }}
    strategy:
      matrix:
        python-version: ["3.13"]
    steps:
      - name: Check out the repository
        uses: actions/checkout@v5.0.0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6.0.0
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_test.txt
          pip install -e .
      - name: Run tests with coverage
        run: |
          pytest --cov=custom_components.smartcocoon --cov-report=xml --cov-report=html
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-python-${{ matrix.python-version }}
          fail_ci_if_error: false

  security:
    runs-on: "ubuntu-latest"
    name: Security Scan
    steps:
      - name: Check out the repository
        uses: actions/checkout@v5.0.0
      - name: Set up Python 3.13
        uses: actions/setup-python@v6.0.0
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_test.txt
          pip install -e .
      - name: Run safety vulnerability scan
        run: |
          echo "üîç Running safety vulnerability scan..."
          # Note: safety now requires authentication for scan command
          # For CI, we'll use pip-audit which provides similar functionality
          echo "Skipping safety scan (requires authentication)"
      - name: Run pip-audit dependency audit
        run: |
          echo "üîç Running pip-audit dependency audit..."
          pip-audit --requirement requirements.txt --requirement requirements_test.txt --desc --format=json
      - name: Run semgrep security analysis
        run: |
          echo "üîç Running semgrep security analysis..."
          semgrep --config=auto --error --json --output=semgrep-results.json .
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            semgrep-results.json
          retention-days: 30

  hacs:
    runs-on: "ubuntu-latest"
    name: HACS
    steps:
      - name: Check out the repository
        uses: "actions/checkout@v5.0.0"

      - name: HACS validation
        uses: "hacs/action@22.5.0"
        with:
          category: "integration"
          ignore: brands

  hassfest:
    runs-on: "ubuntu-latest"
    name: Hassfest
    steps:
      - name: Check out the repository
        uses: "actions/checkout@v5.0.0"

      - name: Hassfest validation
        uses: "home-assistant/actions/hassfest@master"
