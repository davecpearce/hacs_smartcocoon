[project]
name        = "hacs_smartcocoon"
version     = "v1.1.4"
license     = {text = "MIT"}
description = "SmartCocoon integration with Home Assistant."
readme      = "README.md"
authors     = [
    {name = "Dave Pearce"}
]
keywords    = ["smartcocoon", "homeassistant"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.13",
    "Topic :: Home Automation",
]
requires-python = ">=3.13.2"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["custom_components*"]
exclude = ["node_modules*", "tests*", "scripts*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
# Note: Use 'python -m black --safe' to match pre-commit formatting
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
# Note: Use 'pre-commit run black --all-files' to match CI formatting

[tool.pylint.BASIC]
class-const-naming-style = "any"
good-names = [
    "_",
    "ev",
    "ex",
    "fp",
    "i",
    "id",
    "j",
    "k",
    "Run",
    "ip",
]

[tool.pylint.MAIN]
py-version = "3.13"
ignore = [
    "tests",
]

[tool.pylint."MESSAGES CONTROL"]
# wrong-import-order - isort guards this
disable = [
    "format",
    "abstract-method",
    "cyclic-import",
    "duplicate-code",
    "inconsistent-return-statements",
    "locally-disabled",
    "not-context-manager",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-boolean-expressions",
    "wrong-import-order",
    "consider-using-f-string"
]

[tool.pylint.REPORTS]
score = false

[tool.pylint.TYPECHECK]
ignored-classes = [
    "_CountingAttr",  # for attrs
]

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
# Expand rule set similar to HA Core (core + import + ruff-specific)
select = [
  "E", "F", "W",  # Pyflakes/pycodestyle warnings/errors
  "I",              # isort (imports)
  "UP",             # Pyupgrade
  "BLE",            # Blind except
  "SLF",            # Private member access
  "RUF",            # Ruff-specific rules
  "FLY",            # Flynt-inspired rules (string joins -> f-strings)
]
ignore = []

[tool.ruff.lint.isort]
# Align import sorting with Black-style grouping
combine-as-imports = true
force-sort-within-sections = true
known-first-party = ["custom_components.smartcocoon", "homeassistant", "tests"]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
]

[tool.ruff.format]
quote-style = "preserve"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.pytest.ini_options]
pythonpath = [
  "."
]
addopts = "-qq --timeout=9 --cov-report=html:htmlcov --cov-report=term-missing --cov=custom_components.smartcocoon --cov-fail-under=70 --cov-branch --cov-context=test"
console_output_style = "count"
testpaths = [
  "tests",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = [
    "custom_components",
]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]
branch = true
parallel = true
concurrency = [
    "thread",
    "multiprocessing",
]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
